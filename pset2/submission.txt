Homework 2; Timothy Price;

1. for(int i=0; i < n - 5; ++i) 
          for(int j=0; j < n/2; j++)
                 Console.WriteLine($"i = {i} and j = {j});

    -- solution 1;
   
    outer loop = runs 'n-5' times; so O(n) time complexity
    inner loop = runs 'n/2' times; so O(n) time complexity
    O(n) * O(n) = O(n²) * Big Oh of n Squared

2. for(int i=0; i < 2*n; ++i) 
          for(int j=i * i; j > 0; j--)
                 if( j > 2)
                      Console.WriteLine($"{i} + {j} = {i+j}");

    -- solution 2;
    
    outer loop = runs '2n' times; so O(n) time complexity
    inner loop = runs '(2n)²' times; drop constants so O(n)² is the time complexity
    O(n) * O(n)² = O(n³) or 'Big Oh of n cubed'

3. double x=1, y=n;
     for(int i = 0; i <= 2*n; i++)
     {
          x = 1;
          y = n;
          while(x<y)
          {
               x++;
               y--;
          }
    }

    -- solution 3;
    
    outer loop = runs '2n' times; so O(n) time complexity
    inner loop = runs roughtly '1/2 * n' times; so O(n) time complexity
    O(n) * O(n) = O(n²) * Big Oh of n Squared

4.  Recurrence
     Solve for BigOh: T(n) = 2T(n - 1) - 1 and T(0) = 2.







